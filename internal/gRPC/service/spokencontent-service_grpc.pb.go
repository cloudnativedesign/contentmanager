// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecordingServiceClient is the client API for RecordingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordingServiceClient interface {
	// CRUD
	Add(ctx context.Context, in *AudioRecording, opts ...grpc.CallOption) (*AddAudioRecordingResponse, error)
	Update(ctx context.Context, in *AudioRecording, opts ...grpc.CallOption) (*UpdateRecordingResponse, error)
	Delete(ctx context.Context, in *DeleteAudioRecordingRequest, opts ...grpc.CallOption) (*DeleteAudioRecordingResponse, error)
}

type recordingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordingServiceClient(cc grpc.ClientConnInterface) RecordingServiceClient {
	return &recordingServiceClient{cc}
}

func (c *recordingServiceClient) Add(ctx context.Context, in *AudioRecording, opts ...grpc.CallOption) (*AddAudioRecordingResponse, error) {
	out := new(AddAudioRecordingResponse)
	err := c.cc.Invoke(ctx, "/service.RecordingService/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordingServiceClient) Update(ctx context.Context, in *AudioRecording, opts ...grpc.CallOption) (*UpdateRecordingResponse, error) {
	out := new(UpdateRecordingResponse)
	err := c.cc.Invoke(ctx, "/service.RecordingService/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordingServiceClient) Delete(ctx context.Context, in *DeleteAudioRecordingRequest, opts ...grpc.CallOption) (*DeleteAudioRecordingResponse, error) {
	out := new(DeleteAudioRecordingResponse)
	err := c.cc.Invoke(ctx, "/service.RecordingService/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordingServiceServer is the server API for RecordingService service.
// All implementations must embed UnimplementedRecordingServiceServer
// for forward compatibility
type RecordingServiceServer interface {
	// CRUD
	Add(context.Context, *AudioRecording) (*AddAudioRecordingResponse, error)
	Update(context.Context, *AudioRecording) (*UpdateRecordingResponse, error)
	Delete(context.Context, *DeleteAudioRecordingRequest) (*DeleteAudioRecordingResponse, error)
	mustEmbedUnimplementedRecordingServiceServer()
}

// UnimplementedRecordingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecordingServiceServer struct {
}

func (UnimplementedRecordingServiceServer) Add(context.Context, *AudioRecording) (*AddAudioRecordingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedRecordingServiceServer) Update(context.Context, *AudioRecording) (*UpdateRecordingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRecordingServiceServer) Delete(context.Context, *DeleteAudioRecordingRequest) (*DeleteAudioRecordingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRecordingServiceServer) mustEmbedUnimplementedRecordingServiceServer() {}

// UnsafeRecordingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordingServiceServer will
// result in compilation errors.
type UnsafeRecordingServiceServer interface {
	mustEmbedUnimplementedRecordingServiceServer()
}

func RegisterRecordingServiceServer(s grpc.ServiceRegistrar, srv RecordingServiceServer) {
	s.RegisterService(&RecordingService_ServiceDesc, srv)
}

func _RecordingService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioRecording)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.RecordingService/add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingServiceServer).Add(ctx, req.(*AudioRecording))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordingService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AudioRecording)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.RecordingService/update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingServiceServer).Update(ctx, req.(*AudioRecording))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordingService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAudioRecordingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordingServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.RecordingService/delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordingServiceServer).Delete(ctx, req.(*DeleteAudioRecordingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordingService_ServiceDesc is the grpc.ServiceDesc for RecordingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.RecordingService",
	HandlerType: (*RecordingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _RecordingService_Add_Handler,
		},
		{
			MethodName: "update",
			Handler:    _RecordingService_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _RecordingService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto-files/service/spokencontent-service.proto",
}
